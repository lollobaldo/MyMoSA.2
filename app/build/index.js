!function(e){var t={},n={0:0};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(t){if(0!==n[t]){var o=require("./"+({}[t]||t)),r=o.modules,s=o.ids;for(var c in r)e[c]=r[c];for(var u=0;u<s.length;u++)n[s[u]]=0}return Promise.all([])},o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o.oe=function(e){process.nextTick((function(){throw e}))},o(o.s=7)}([function(e,t){e.exports=require("os")},function(e,t){e.exports=require("node-dht-sensor")},,,,function(e,t){e.exports=require("mqtt")},function(e,t,n){var o={"./dht.js":[2,4],"./os.js":[3,5],"./template.js":[4,6]};function r(e){if(!n.o(o,e))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=o[e],r=t[0];return n.e(t[1]).then((function(){return n(r)}))}r.keys=function(){return Object.keys(o)},r.id=6,e.exports=r},function(e,t,n){"use strict";n.r(t);var o=n(5);const r=e=>{console.error(e)},s=e=>{console.warn(e)},c=e=>{console.log(e)};const u={global:{modules:{template:{prettyName:"Template module",config:{interval:2e3,pin:600}}}},development:{debugging:!0},production:{debugging:!1}};var i=Object.assign(u.global,{mqttCredentials:{clientId:"MyMoSA.2",server:"mqtts://mqtt.flespi.io",username:"6tQ4BNROJgrjDzruUJQi9cr9CAbvfrJ9Ip390IOAM5JgtYybxfhwhxtJXu20JAZh",port:8883}},u.production);const{server:a,...l}=i.mqttCredentials,f=Object.assign({},i.modules),p=()=>{},d={setup:p,onMessage:p,cleanup:p},m=Object(o.connect)(a,l),g=(e,t,n,o)=>{const r=e+(t?"/":"");console.log(r),console.log(n),m.publish(r,n,o)};m.on("connect",()=>{c("Connected to MQTT broker"),(async()=>{Object.keys(f).forEach(async e=>{const t=f[e];t.name=e;try{const{setup:e,onMessage:o,cleanup:r}=Object.assign(d,await n(6)("./"+t.name+".js"));c(`Loaded module: ${t.prettyName}.`),e({publishFunction:g.bind(null,t.name),...t.config}),c(`Setup module: ${t.prettyName}.`),f[t.name].loaded=!0,f[t.name].callbacks={setup:e,onMessage:o,cleanup:r}}catch(e){s(`Failed to load module: ${t.prettyName}.`),s(e)}})})().then(()=>{Object.keys(f).forEach(e=>{const t=f[e];m.subscribe(t.name,e=>{e&&r(e)})})}).catch(e=>{console.log(e),console.log("Error setting up modules. Likely more error output is shown above")})}),m.on("message",(e,t)=>{console.log(`New message on topic ${e}: ${t.toString()}`)}),process.on("exit",e=>{c(`Whoa! Exit code ${e}, cleaning up...`),f.forEach(e=>{e.cleanup()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,